"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.makePrinter = void 0;
const log_level_1 = require("./log-level");
function makePrinter(_a) {
    var { handler, format, level } = _a, defaults = __rest(_a, ["handler", "format", "level"]);
    return { log, warn, error, fatal, verbose: log };
    function log(...messages) {
        if (level < log_level_1.LogLevel.info)
            return;
        const options = Object.assign(Object.assign({}, defaults), { level: 'info' });
        handler.log(format(messages, options));
    }
    function warn(...messages) {
        if (level < log_level_1.LogLevel.warn)
            return;
        const options = Object.assign(Object.assign({}, defaults), { level: 'warn' });
        if (handler.warn)
            handler.warn(format(messages, options));
        else
            handler.log(format(messages, options));
    }
    function error(...messages) {
        if (level < log_level_1.LogLevel.error)
            return;
        const options = Object.assign(Object.assign({}, defaults), { level: 'error' });
        if (handler.error)
            handler.error(format(messages, options));
        else
            handler.log(format(messages, options));
    }
    function fatal(...messages) {
        if (level < log_level_1.LogLevel.fatal)
            return;
        const options = Object.assign(Object.assign({}, defaults), { level: 'fatal' });
        if (handler.fatal)
            handler.fatal(format(messages, options));
        else if (handler.error)
            handler.error(format(messages, options));
        else
            handler.log(format(messages, options));
    }
}
exports.makePrinter = makePrinter;
